// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Morphan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Morphan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Color_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrimitiveProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrimitiveProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MorphanKeyFrameProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MorphanKeyFrameProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MorphanProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MorphanProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Morphan_2eproto() {
  protobuf_AddDesc_Morphan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Morphan.proto");
  GOOGLE_CHECK(file != NULL);
  Color_descriptor_ = file->message_type(0);
  static const int Color_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, a_),
  };
  Color_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Color_descriptor_,
      Color::default_instance_,
      Color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Color));
  Point_descriptor_ = file->message_type(1);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  ExtraParams_descriptor_ = file->message_type(2);
  static const int ExtraParams_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraParams, num_sides_),
  };
  ExtraParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraParams_descriptor_,
      ExtraParams::default_instance_,
      ExtraParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraParams));
  PrimitiveProto_descriptor_ = file->message_type(3);
  static const int PrimitiveProto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveProto, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveProto, outline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveProto, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveProto, fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveProto, filled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveProto, params_),
  };
  PrimitiveProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrimitiveProto_descriptor_,
      PrimitiveProto::default_instance_,
      PrimitiveProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrimitiveProto));
  MorphanKeyFrameProto_descriptor_ = file->message_type(4);
  static const int MorphanKeyFrameProto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphanKeyFrameProto, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphanKeyFrameProto, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphanKeyFrameProto, scale_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphanKeyFrameProto, scale_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphanKeyFrameProto, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphanKeyFrameProto, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphanKeyFrameProto, primitives_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphanKeyFrameProto, millisecs_),
  };
  MorphanKeyFrameProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MorphanKeyFrameProto_descriptor_,
      MorphanKeyFrameProto::default_instance_,
      MorphanKeyFrameProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphanKeyFrameProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphanKeyFrameProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MorphanKeyFrameProto));
  MorphanProto_descriptor_ = file->message_type(5);
  static const int MorphanProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphanProto, frames_),
  };
  MorphanProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MorphanProto_descriptor_,
      MorphanProto::default_instance_,
      MorphanProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphanProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphanProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MorphanProto));
  Type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Morphan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Color_descriptor_, &Color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraParams_descriptor_, &ExtraParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrimitiveProto_descriptor_, &PrimitiveProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MorphanKeyFrameProto_descriptor_, &MorphanKeyFrameProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MorphanProto_descriptor_, &MorphanProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Morphan_2eproto() {
  delete Color::default_instance_;
  delete Color_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete ExtraParams::default_instance_;
  delete ExtraParams_reflection_;
  delete PrimitiveProto::default_instance_;
  delete PrimitiveProto_reflection_;
  delete MorphanKeyFrameProto::default_instance_;
  delete MorphanKeyFrameProto_reflection_;
  delete MorphanProto::default_instance_;
  delete MorphanProto_reflection_;
}

void protobuf_AddDesc_Morphan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMorphan.proto\"3\n\005Color\022\t\n\001r\030\001 \002(\005\022\t\n\001g"
    "\030\002 \002(\005\022\t\n\001b\030\003 \002(\005\022\t\n\001a\030\004 \001(\005\"\035\n\005Point\022\t\n"
    "\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\" \n\013ExtraParams\022\021\n\tnu"
    "m_sides\030\001 \001(\005\"\270\001\n\016PrimitiveProto\022\n\n\002id\030\001"
    " \001(\003\022\023\n\004type\030\002 \002(\0162\005.Type\022\026\n\006points\030\003 \003("
    "\0132\006.Point\022\027\n\007outline\030\004 \001(\0132\006.Color\022\020\n\005wi"
    "dth\030\005 \001(\005:\0011\022\024\n\004fill\030\006 \001(\0132\006.Color\022\016\n\006fi"
    "lled\030\007 \001(\010\022\034\n\006params\030\010 \001(\0132\014.ExtraParams"
    "\"\257\001\n\024MorphanKeyFrameProto\022\t\n\001x\030\001 \001(\005\022\t\n\001"
    "y\030\002 \001(\005\022\022\n\007scale_x\030\003 \001(\002:\0011\022\022\n\007scale_y\030\004"
    " \001(\002:\0011\022\020\n\010rotation\030\005 \001(\002\022\017\n\007opacity\030\006 \001"
    "(\002\022#\n\nprimitives\030\007 \003(\0132\017.PrimitiveProto\022"
    "\021\n\tmillisecs\030\010 \001(\005\"5\n\014MorphanProto\022%\n\006fr"
    "ames\030\001 \003(\0132\025.MorphanKeyFrameProto*\201\001\n\004Ty"
    "pe\022\013\n\007INVALID\020\000\022\010\n\004LINE\020\001\022\r\n\tRECTANGLE\020\002"
    "\022\n\n\006CIRCLE\020\003\022\022\n\016CONVEX_POLYGON\020\004\022\013\n\007POLY"
    "GON\020\005\022\013\n\007ELLIPSE\020\006\022\007\n\003ARC\020\007\022\020\n\014BEZIER_CU"
    "RVE\020\010", 685);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Morphan.proto", &protobuf_RegisterTypes);
  Color::default_instance_ = new Color();
  Point::default_instance_ = new Point();
  ExtraParams::default_instance_ = new ExtraParams();
  PrimitiveProto::default_instance_ = new PrimitiveProto();
  MorphanKeyFrameProto::default_instance_ = new MorphanKeyFrameProto();
  MorphanProto::default_instance_ = new MorphanProto();
  Color::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  ExtraParams::default_instance_->InitAsDefaultInstance();
  PrimitiveProto::default_instance_->InitAsDefaultInstance();
  MorphanKeyFrameProto::default_instance_->InitAsDefaultInstance();
  MorphanProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Morphan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Morphan_2eproto {
  StaticDescriptorInitializer_Morphan_2eproto() {
    protobuf_AddDesc_Morphan_2eproto();
  }
} static_descriptor_initializer_Morphan_2eproto_;
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}
bool Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Color::kRFieldNumber;
const int Color::kGFieldNumber;
const int Color::kBFieldNumber;
const int Color::kAFieldNumber;
#endif  // !_MSC_VER

Color::Color()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Color)
}

void Color::InitAsDefaultInstance() {
}

Color::Color(const Color& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Color)
}

void Color::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  a_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:Color)
  SharedDtor();
}

void Color::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_descriptor_;
}

const Color& Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Morphan_2eproto();
  return *default_instance_;
}

Color* Color::default_instance_ = NULL;

Color* Color::New() const {
  return new Color;
}

void Color::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Color*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(r_, a_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 r = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_g;
        break;
      }

      // required int32 g = 2;
      case 2: {
        if (tag == 16) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_b;
        break;
      }

      // required int32 b = 3;
      case 3: {
        if (tag == 24) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_a;
        break;
      }

      // optional int32 a = 4;
      case 4: {
        if (tag == 32) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Color)
  // required int32 r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // required int32 g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }

  // required int32 b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  // optional int32 a = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->a(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Color)
}

::google::protobuf::uint8* Color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Color)
  // required int32 r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }

  // required int32 g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->g(), target);
  }

  // required int32 b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }

  // optional int32 a = 4;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->a(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Color)
  return target;
}

int Color::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }

    // required int32 g = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g());
    }

    // required int32 b = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

    // optional int32 a = 4;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Color* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Color*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Color::Swap(Color* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(a_, other->a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Color_descriptor_;
  metadata.reflection = Color_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Morphan_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Point)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Point)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtraParams::kNumSidesFieldNumber;
#endif  // !_MSC_VER

ExtraParams::ExtraParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExtraParams)
}

void ExtraParams::InitAsDefaultInstance() {
}

ExtraParams::ExtraParams(const ExtraParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ExtraParams)
}

void ExtraParams::SharedCtor() {
  _cached_size_ = 0;
  num_sides_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraParams::~ExtraParams() {
  // @@protoc_insertion_point(destructor:ExtraParams)
  SharedDtor();
}

void ExtraParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExtraParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraParams_descriptor_;
}

const ExtraParams& ExtraParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Morphan_2eproto();
  return *default_instance_;
}

ExtraParams* ExtraParams::default_instance_ = NULL;

ExtraParams* ExtraParams::New() const {
  return new ExtraParams;
}

void ExtraParams::Clear() {
  num_sides_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExtraParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_sides = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sides_)));
          set_has_num_sides();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExtraParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExtraParams)
  return false;
#undef DO_
}

void ExtraParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExtraParams)
  // optional int32 num_sides = 1;
  if (has_num_sides()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_sides(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExtraParams)
}

::google::protobuf::uint8* ExtraParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExtraParams)
  // optional int32 num_sides = 1;
  if (has_num_sides()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_sides(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExtraParams)
  return target;
}

int ExtraParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_sides = 1;
    if (has_num_sides()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sides());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraParams::MergeFrom(const ExtraParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_sides()) {
      set_num_sides(from.num_sides());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraParams::CopyFrom(const ExtraParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraParams::IsInitialized() const {

  return true;
}

void ExtraParams::Swap(ExtraParams* other) {
  if (other != this) {
    std::swap(num_sides_, other->num_sides_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraParams_descriptor_;
  metadata.reflection = ExtraParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrimitiveProto::kIdFieldNumber;
const int PrimitiveProto::kTypeFieldNumber;
const int PrimitiveProto::kPointsFieldNumber;
const int PrimitiveProto::kOutlineFieldNumber;
const int PrimitiveProto::kWidthFieldNumber;
const int PrimitiveProto::kFillFieldNumber;
const int PrimitiveProto::kFilledFieldNumber;
const int PrimitiveProto::kParamsFieldNumber;
#endif  // !_MSC_VER

PrimitiveProto::PrimitiveProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrimitiveProto)
}

void PrimitiveProto::InitAsDefaultInstance() {
  outline_ = const_cast< ::Color*>(&::Color::default_instance());
  fill_ = const_cast< ::Color*>(&::Color::default_instance());
  params_ = const_cast< ::ExtraParams*>(&::ExtraParams::default_instance());
}

PrimitiveProto::PrimitiveProto(const PrimitiveProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PrimitiveProto)
}

void PrimitiveProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  outline_ = NULL;
  width_ = 1;
  fill_ = NULL;
  filled_ = false;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrimitiveProto::~PrimitiveProto() {
  // @@protoc_insertion_point(destructor:PrimitiveProto)
  SharedDtor();
}

void PrimitiveProto::SharedDtor() {
  if (this != default_instance_) {
    delete outline_;
    delete fill_;
    delete params_;
  }
}

void PrimitiveProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrimitiveProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrimitiveProto_descriptor_;
}

const PrimitiveProto& PrimitiveProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Morphan_2eproto();
  return *default_instance_;
}

PrimitiveProto* PrimitiveProto::default_instance_ = NULL;

PrimitiveProto* PrimitiveProto::New() const {
  return new PrimitiveProto;
}

void PrimitiveProto::Clear() {
  if (_has_bits_[0 / 32] & 251) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_outline()) {
      if (outline_ != NULL) outline_->::Color::Clear();
    }
    width_ = 1;
    if (has_fill()) {
      if (fill_ != NULL) fill_->::Color::Clear();
    }
    filled_ = false;
    if (has_params()) {
      if (params_ != NULL) params_->::ExtraParams::Clear();
    }
  }
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrimitiveProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrimitiveProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Type_IsValid(value)) {
            set_type(static_cast< ::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_points;
        break;
      }

      // repeated .Point points = 3;
      case 3: {
        if (tag == 26) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_points;
        if (input->ExpectTag(34)) goto parse_outline;
        break;
      }

      // optional .Color outline = 4;
      case 4: {
        if (tag == 34) {
         parse_outline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_width;
        break;
      }

      // optional int32 width = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fill;
        break;
      }

      // optional .Color fill = 6;
      case 6: {
        if (tag == 50) {
         parse_fill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_filled;
        break;
      }

      // optional bool filled = 7;
      case 7: {
        if (tag == 56) {
         parse_filled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filled_)));
          set_has_filled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_params;
        break;
      }

      // optional .ExtraParams params = 8;
      case 8: {
        if (tag == 66) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrimitiveProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrimitiveProto)
  return false;
#undef DO_
}

void PrimitiveProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrimitiveProto)
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required .Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .Point points = 3;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->points(i), output);
  }

  // optional .Color outline = 4;
  if (has_outline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->outline(), output);
  }

  // optional int32 width = 5 [default = 1];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->width(), output);
  }

  // optional .Color fill = 6;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fill(), output);
  }

  // optional bool filled = 7;
  if (has_filled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->filled(), output);
  }

  // optional .ExtraParams params = 8;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrimitiveProto)
}

::google::protobuf::uint8* PrimitiveProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrimitiveProto)
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required .Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .Point points = 3;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->points(i), target);
  }

  // optional .Color outline = 4;
  if (has_outline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->outline(), target);
  }

  // optional int32 width = 5 [default = 1];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->width(), target);
  }

  // optional .Color fill = 6;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fill(), target);
  }

  // optional bool filled = 7;
  if (has_filled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->filled(), target);
  }

  // optional .ExtraParams params = 8;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrimitiveProto)
  return target;
}

int PrimitiveProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required .Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Color outline = 4;
    if (has_outline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outline());
    }

    // optional int32 width = 5 [default = 1];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional .Color fill = 6;
    if (has_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fill());
    }

    // optional bool filled = 7;
    if (has_filled()) {
      total_size += 1 + 1;
    }

    // optional .ExtraParams params = 8;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  // repeated .Point points = 3;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrimitiveProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrimitiveProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrimitiveProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrimitiveProto::MergeFrom(const PrimitiveProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_outline()) {
      mutable_outline()->::Color::MergeFrom(from.outline());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_fill()) {
      mutable_fill()->::Color::MergeFrom(from.fill());
    }
    if (from.has_filled()) {
      set_filled(from.filled());
    }
    if (from.has_params()) {
      mutable_params()->::ExtraParams::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrimitiveProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimitiveProto::CopyFrom(const PrimitiveProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->points())) return false;
  if (has_outline()) {
    if (!this->outline().IsInitialized()) return false;
  }
  if (has_fill()) {
    if (!this->fill().IsInitialized()) return false;
  }
  return true;
}

void PrimitiveProto::Swap(PrimitiveProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    points_.Swap(&other->points_);
    std::swap(outline_, other->outline_);
    std::swap(width_, other->width_);
    std::swap(fill_, other->fill_);
    std::swap(filled_, other->filled_);
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrimitiveProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrimitiveProto_descriptor_;
  metadata.reflection = PrimitiveProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MorphanKeyFrameProto::kXFieldNumber;
const int MorphanKeyFrameProto::kYFieldNumber;
const int MorphanKeyFrameProto::kScaleXFieldNumber;
const int MorphanKeyFrameProto::kScaleYFieldNumber;
const int MorphanKeyFrameProto::kRotationFieldNumber;
const int MorphanKeyFrameProto::kOpacityFieldNumber;
const int MorphanKeyFrameProto::kPrimitivesFieldNumber;
const int MorphanKeyFrameProto::kMillisecsFieldNumber;
#endif  // !_MSC_VER

MorphanKeyFrameProto::MorphanKeyFrameProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MorphanKeyFrameProto)
}

void MorphanKeyFrameProto::InitAsDefaultInstance() {
}

MorphanKeyFrameProto::MorphanKeyFrameProto(const MorphanKeyFrameProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MorphanKeyFrameProto)
}

void MorphanKeyFrameProto::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  scale_x_ = 1;
  scale_y_ = 1;
  rotation_ = 0;
  opacity_ = 0;
  millisecs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MorphanKeyFrameProto::~MorphanKeyFrameProto() {
  // @@protoc_insertion_point(destructor:MorphanKeyFrameProto)
  SharedDtor();
}

void MorphanKeyFrameProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MorphanKeyFrameProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MorphanKeyFrameProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MorphanKeyFrameProto_descriptor_;
}

const MorphanKeyFrameProto& MorphanKeyFrameProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Morphan_2eproto();
  return *default_instance_;
}

MorphanKeyFrameProto* MorphanKeyFrameProto::default_instance_ = NULL;

MorphanKeyFrameProto* MorphanKeyFrameProto::New() const {
  return new MorphanKeyFrameProto;
}

void MorphanKeyFrameProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MorphanKeyFrameProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(x_, y_);
    ZR_(rotation_, opacity_);
    scale_x_ = 1;
    scale_y_ = 1;
    millisecs_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  primitives_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MorphanKeyFrameProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MorphanKeyFrameProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_scale_x;
        break;
      }

      // optional float scale_x = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_scale_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_x_)));
          set_has_scale_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_scale_y;
        break;
      }

      // optional float scale_y = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_scale_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_y_)));
          set_has_scale_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_rotation;
        break;
      }

      // optional float rotation = 5;
      case 5: {
        if (tag == 45) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_opacity;
        break;
      }

      // optional float opacity = 6;
      case 6: {
        if (tag == 53) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_primitives;
        break;
      }

      // repeated .PrimitiveProto primitives = 7;
      case 7: {
        if (tag == 58) {
         parse_primitives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_primitives()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_primitives;
        if (input->ExpectTag(64)) goto parse_millisecs;
        break;
      }

      // optional int32 millisecs = 8;
      case 8: {
        if (tag == 64) {
         parse_millisecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &millisecs_)));
          set_has_millisecs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MorphanKeyFrameProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MorphanKeyFrameProto)
  return false;
#undef DO_
}

void MorphanKeyFrameProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MorphanKeyFrameProto)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional float scale_x = 3 [default = 1];
  if (has_scale_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->scale_x(), output);
  }

  // optional float scale_y = 4 [default = 1];
  if (has_scale_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->scale_y(), output);
  }

  // optional float rotation = 5;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rotation(), output);
  }

  // optional float opacity = 6;
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->opacity(), output);
  }

  // repeated .PrimitiveProto primitives = 7;
  for (int i = 0; i < this->primitives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->primitives(i), output);
  }

  // optional int32 millisecs = 8;
  if (has_millisecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->millisecs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MorphanKeyFrameProto)
}

::google::protobuf::uint8* MorphanKeyFrameProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MorphanKeyFrameProto)
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional float scale_x = 3 [default = 1];
  if (has_scale_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->scale_x(), target);
  }

  // optional float scale_y = 4 [default = 1];
  if (has_scale_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->scale_y(), target);
  }

  // optional float rotation = 5;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rotation(), target);
  }

  // optional float opacity = 6;
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->opacity(), target);
  }

  // repeated .PrimitiveProto primitives = 7;
  for (int i = 0; i < this->primitives_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->primitives(i), target);
  }

  // optional int32 millisecs = 8;
  if (has_millisecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->millisecs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MorphanKeyFrameProto)
  return target;
}

int MorphanKeyFrameProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional float scale_x = 3 [default = 1];
    if (has_scale_x()) {
      total_size += 1 + 4;
    }

    // optional float scale_y = 4 [default = 1];
    if (has_scale_y()) {
      total_size += 1 + 4;
    }

    // optional float rotation = 5;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

    // optional float opacity = 6;
    if (has_opacity()) {
      total_size += 1 + 4;
    }

    // optional int32 millisecs = 8;
    if (has_millisecs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->millisecs());
    }

  }
  // repeated .PrimitiveProto primitives = 7;
  total_size += 1 * this->primitives_size();
  for (int i = 0; i < this->primitives_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->primitives(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MorphanKeyFrameProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MorphanKeyFrameProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MorphanKeyFrameProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MorphanKeyFrameProto::MergeFrom(const MorphanKeyFrameProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  primitives_.MergeFrom(from.primitives_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_scale_x()) {
      set_scale_x(from.scale_x());
    }
    if (from.has_scale_y()) {
      set_scale_y(from.scale_y());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_millisecs()) {
      set_millisecs(from.millisecs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MorphanKeyFrameProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MorphanKeyFrameProto::CopyFrom(const MorphanKeyFrameProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MorphanKeyFrameProto::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->primitives())) return false;
  return true;
}

void MorphanKeyFrameProto::Swap(MorphanKeyFrameProto* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(scale_x_, other->scale_x_);
    std::swap(scale_y_, other->scale_y_);
    std::swap(rotation_, other->rotation_);
    std::swap(opacity_, other->opacity_);
    primitives_.Swap(&other->primitives_);
    std::swap(millisecs_, other->millisecs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MorphanKeyFrameProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MorphanKeyFrameProto_descriptor_;
  metadata.reflection = MorphanKeyFrameProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MorphanProto::kFramesFieldNumber;
#endif  // !_MSC_VER

MorphanProto::MorphanProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MorphanProto)
}

void MorphanProto::InitAsDefaultInstance() {
}

MorphanProto::MorphanProto(const MorphanProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MorphanProto)
}

void MorphanProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MorphanProto::~MorphanProto() {
  // @@protoc_insertion_point(destructor:MorphanProto)
  SharedDtor();
}

void MorphanProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MorphanProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MorphanProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MorphanProto_descriptor_;
}

const MorphanProto& MorphanProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Morphan_2eproto();
  return *default_instance_;
}

MorphanProto* MorphanProto::default_instance_ = NULL;

MorphanProto* MorphanProto::New() const {
  return new MorphanProto;
}

void MorphanProto::Clear() {
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MorphanProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MorphanProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MorphanKeyFrameProto frames = 1;
      case 1: {
        if (tag == 10) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_frames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MorphanProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MorphanProto)
  return false;
#undef DO_
}

void MorphanProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MorphanProto)
  // repeated .MorphanKeyFrameProto frames = 1;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MorphanProto)
}

::google::protobuf::uint8* MorphanProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MorphanProto)
  // repeated .MorphanKeyFrameProto frames = 1;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MorphanProto)
  return target;
}

int MorphanProto::ByteSize() const {
  int total_size = 0;

  // repeated .MorphanKeyFrameProto frames = 1;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MorphanProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MorphanProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MorphanProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MorphanProto::MergeFrom(const MorphanProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MorphanProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MorphanProto::CopyFrom(const MorphanProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MorphanProto::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->frames())) return false;
  return true;
}

void MorphanProto::Swap(MorphanProto* other) {
  if (other != this) {
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MorphanProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MorphanProto_descriptor_;
  metadata.reflection = MorphanProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

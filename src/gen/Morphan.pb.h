// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Morphan.proto

#ifndef PROTOBUF_Morphan_2eproto__INCLUDED
#define PROTOBUF_Morphan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Morphan_2eproto();
void protobuf_AssignDesc_Morphan_2eproto();
void protobuf_ShutdownFile_Morphan_2eproto();

class Color;
class Point;
class Primitive;
class MorphanKeyFrame;
class Morphan;

enum Type {
  INVALID = 0,
  LINE = 1,
  RECTANGLE = 2,
  CIRCLE = 3,
  CONVEX_POLYGON = 4,
  POLYGON = 5,
  ELLIPSE = 6,
  ARC = 7,
  BEZIER_CURVE = 8
};
bool Type_IsValid(int value);
const Type Type_MIN = INVALID;
const Type Type_MAX = BEZIER_CURVE;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class Color : public ::google::protobuf::Message {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  void Swap(Color* other);

  // implements Message ----------------------------------------------

  Color* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::int32 r() const;
  inline void set_r(::google::protobuf::int32 value);

  // required int32 g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::int32 g() const;
  inline void set_g(::google::protobuf::int32 value);

  // required int32 b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);

  // optional int32 a = 4;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline ::google::protobuf::int32 a() const;
  inline void set_a(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Color)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_a();
  inline void clear_has_a();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 r_;
  ::google::protobuf::int32 g_;
  ::google::protobuf::int32 b_;
  ::google::protobuf::int32 a_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Morphan_2eproto();
  friend void protobuf_AssignDesc_Morphan_2eproto();
  friend void protobuf_ShutdownFile_Morphan_2eproto();

  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Morphan_2eproto();
  friend void protobuf_AssignDesc_Morphan_2eproto();
  friend void protobuf_ShutdownFile_Morphan_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Primitive : public ::google::protobuf::Message {
 public:
  Primitive();
  virtual ~Primitive();

  Primitive(const Primitive& from);

  inline Primitive& operator=(const Primitive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Primitive& default_instance();

  void Swap(Primitive* other);

  // implements Message ----------------------------------------------

  Primitive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Primitive& from);
  void MergeFrom(const Primitive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required .Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Type type() const;
  inline void set_type(::Type value);

  // repeated .Point controls = 3;
  inline int controls_size() const;
  inline void clear_controls();
  static const int kControlsFieldNumber = 3;
  inline const ::Point& controls(int index) const;
  inline ::Point* mutable_controls(int index);
  inline ::Point* add_controls();
  inline const ::google::protobuf::RepeatedPtrField< ::Point >&
      controls() const;
  inline ::google::protobuf::RepeatedPtrField< ::Point >*
      mutable_controls();

  // optional .Color outline = 4;
  inline bool has_outline() const;
  inline void clear_outline();
  static const int kOutlineFieldNumber = 4;
  inline const ::Color& outline() const;
  inline ::Color* mutable_outline();
  inline ::Color* release_outline();
  inline void set_allocated_outline(::Color* outline);

  // optional int32 width = 5 [default = 1];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional .Color fill = 6;
  inline bool has_fill() const;
  inline void clear_fill();
  static const int kFillFieldNumber = 6;
  inline const ::Color& fill() const;
  inline ::Color* mutable_fill();
  inline ::Color* release_fill();
  inline void set_allocated_fill(::Color* fill);

  // @@protoc_insertion_point(class_scope:Primitive)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_outline();
  inline void clear_has_outline();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_fill();
  inline void clear_has_fill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedPtrField< ::Point > controls_;
  int type_;
  ::google::protobuf::int32 width_;
  ::Color* outline_;
  ::Color* fill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Morphan_2eproto();
  friend void protobuf_AssignDesc_Morphan_2eproto();
  friend void protobuf_ShutdownFile_Morphan_2eproto();

  void InitAsDefaultInstance();
  static Primitive* default_instance_;
};
// -------------------------------------------------------------------

class MorphanKeyFrame : public ::google::protobuf::Message {
 public:
  MorphanKeyFrame();
  virtual ~MorphanKeyFrame();

  MorphanKeyFrame(const MorphanKeyFrame& from);

  inline MorphanKeyFrame& operator=(const MorphanKeyFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MorphanKeyFrame& default_instance();

  void Swap(MorphanKeyFrame* other);

  // implements Message ----------------------------------------------

  MorphanKeyFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MorphanKeyFrame& from);
  void MergeFrom(const MorphanKeyFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional float scale_x = 3 [default = 1];
  inline bool has_scale_x() const;
  inline void clear_scale_x();
  static const int kScaleXFieldNumber = 3;
  inline float scale_x() const;
  inline void set_scale_x(float value);

  // optional float scale_y = 4 [default = 1];
  inline bool has_scale_y() const;
  inline void clear_scale_y();
  static const int kScaleYFieldNumber = 4;
  inline float scale_y() const;
  inline void set_scale_y(float value);

  // optional float rotation = 5;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 5;
  inline float rotation() const;
  inline void set_rotation(float value);

  // optional float opacity = 6;
  inline bool has_opacity() const;
  inline void clear_opacity();
  static const int kOpacityFieldNumber = 6;
  inline float opacity() const;
  inline void set_opacity(float value);

  // repeated .Primitive primitives = 7;
  inline int primitives_size() const;
  inline void clear_primitives();
  static const int kPrimitivesFieldNumber = 7;
  inline const ::Primitive& primitives(int index) const;
  inline ::Primitive* mutable_primitives(int index);
  inline ::Primitive* add_primitives();
  inline const ::google::protobuf::RepeatedPtrField< ::Primitive >&
      primitives() const;
  inline ::google::protobuf::RepeatedPtrField< ::Primitive >*
      mutable_primitives();

  // optional float secs = 8;
  inline bool has_secs() const;
  inline void clear_secs();
  static const int kSecsFieldNumber = 8;
  inline float secs() const;
  inline void set_secs(float value);

  // @@protoc_insertion_point(class_scope:MorphanKeyFrame)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_scale_x();
  inline void clear_has_scale_x();
  inline void set_has_scale_y();
  inline void clear_has_scale_y();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_opacity();
  inline void clear_has_opacity();
  inline void set_has_secs();
  inline void clear_has_secs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  float scale_x_;
  float scale_y_;
  float rotation_;
  float opacity_;
  ::google::protobuf::RepeatedPtrField< ::Primitive > primitives_;
  float secs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Morphan_2eproto();
  friend void protobuf_AssignDesc_Morphan_2eproto();
  friend void protobuf_ShutdownFile_Morphan_2eproto();

  void InitAsDefaultInstance();
  static MorphanKeyFrame* default_instance_;
};
// -------------------------------------------------------------------

class Morphan : public ::google::protobuf::Message {
 public:
  Morphan();
  virtual ~Morphan();

  Morphan(const Morphan& from);

  inline Morphan& operator=(const Morphan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Morphan& default_instance();

  void Swap(Morphan* other);

  // implements Message ----------------------------------------------

  Morphan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Morphan& from);
  void MergeFrom(const Morphan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MorphanKeyFrame frames = 1;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 1;
  inline const ::MorphanKeyFrame& frames(int index) const;
  inline ::MorphanKeyFrame* mutable_frames(int index);
  inline ::MorphanKeyFrame* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::MorphanKeyFrame >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::MorphanKeyFrame >*
      mutable_frames();

  // @@protoc_insertion_point(class_scope:Morphan)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MorphanKeyFrame > frames_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Morphan_2eproto();
  friend void protobuf_AssignDesc_Morphan_2eproto();
  friend void protobuf_ShutdownFile_Morphan_2eproto();

  void InitAsDefaultInstance();
  static Morphan* default_instance_;
};
// ===================================================================


// ===================================================================

// Color

// required int32 r = 1;
inline bool Color::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline ::google::protobuf::int32 Color::r() const {
  return r_;
}
inline void Color::set_r(::google::protobuf::int32 value) {
  set_has_r();
  r_ = value;
}

// required int32 g = 2;
inline bool Color::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline ::google::protobuf::int32 Color::g() const {
  return g_;
}
inline void Color::set_g(::google::protobuf::int32 value) {
  set_has_g();
  g_ = value;
}

// required int32 b = 3;
inline bool Color::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 Color::b() const {
  return b_;
}
inline void Color::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
}

// optional int32 a = 4;
inline bool Color::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Color::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Color::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Color::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline ::google::protobuf::int32 Color::a() const {
  return a_;
}
inline void Color::set_a(::google::protobuf::int32 value) {
  set_has_a();
  a_ = value;
}

// -------------------------------------------------------------------

// Point

// required float x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point::x() const {
  return x_;
}
inline void Point::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point::y() const {
  return y_;
}
inline void Point::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Primitive

// optional int64 id = 1;
inline bool Primitive::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Primitive::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Primitive::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Primitive::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Primitive::id() const {
  return id_;
}
inline void Primitive::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required .Type type = 2;
inline bool Primitive::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Primitive::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Primitive::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Primitive::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Type Primitive::type() const {
  return static_cast< ::Type >(type_);
}
inline void Primitive::set_type(::Type value) {
  assert(::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .Point controls = 3;
inline int Primitive::controls_size() const {
  return controls_.size();
}
inline void Primitive::clear_controls() {
  controls_.Clear();
}
inline const ::Point& Primitive::controls(int index) const {
  return controls_.Get(index);
}
inline ::Point* Primitive::mutable_controls(int index) {
  return controls_.Mutable(index);
}
inline ::Point* Primitive::add_controls() {
  return controls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Point >&
Primitive::controls() const {
  return controls_;
}
inline ::google::protobuf::RepeatedPtrField< ::Point >*
Primitive::mutable_controls() {
  return &controls_;
}

// optional .Color outline = 4;
inline bool Primitive::has_outline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Primitive::set_has_outline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Primitive::clear_has_outline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Primitive::clear_outline() {
  if (outline_ != NULL) outline_->::Color::Clear();
  clear_has_outline();
}
inline const ::Color& Primitive::outline() const {
  return outline_ != NULL ? *outline_ : *default_instance_->outline_;
}
inline ::Color* Primitive::mutable_outline() {
  set_has_outline();
  if (outline_ == NULL) outline_ = new ::Color;
  return outline_;
}
inline ::Color* Primitive::release_outline() {
  clear_has_outline();
  ::Color* temp = outline_;
  outline_ = NULL;
  return temp;
}
inline void Primitive::set_allocated_outline(::Color* outline) {
  delete outline_;
  outline_ = outline;
  if (outline) {
    set_has_outline();
  } else {
    clear_has_outline();
  }
}

// optional int32 width = 5 [default = 1];
inline bool Primitive::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Primitive::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Primitive::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Primitive::clear_width() {
  width_ = 1;
  clear_has_width();
}
inline ::google::protobuf::int32 Primitive::width() const {
  return width_;
}
inline void Primitive::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional .Color fill = 6;
inline bool Primitive::has_fill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Primitive::set_has_fill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Primitive::clear_has_fill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Primitive::clear_fill() {
  if (fill_ != NULL) fill_->::Color::Clear();
  clear_has_fill();
}
inline const ::Color& Primitive::fill() const {
  return fill_ != NULL ? *fill_ : *default_instance_->fill_;
}
inline ::Color* Primitive::mutable_fill() {
  set_has_fill();
  if (fill_ == NULL) fill_ = new ::Color;
  return fill_;
}
inline ::Color* Primitive::release_fill() {
  clear_has_fill();
  ::Color* temp = fill_;
  fill_ = NULL;
  return temp;
}
inline void Primitive::set_allocated_fill(::Color* fill) {
  delete fill_;
  fill_ = fill;
  if (fill) {
    set_has_fill();
  } else {
    clear_has_fill();
  }
}

// -------------------------------------------------------------------

// MorphanKeyFrame

// optional int32 x = 1;
inline bool MorphanKeyFrame::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MorphanKeyFrame::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MorphanKeyFrame::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MorphanKeyFrame::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 MorphanKeyFrame::x() const {
  return x_;
}
inline void MorphanKeyFrame::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 2;
inline bool MorphanKeyFrame::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MorphanKeyFrame::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MorphanKeyFrame::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MorphanKeyFrame::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 MorphanKeyFrame::y() const {
  return y_;
}
inline void MorphanKeyFrame::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional float scale_x = 3 [default = 1];
inline bool MorphanKeyFrame::has_scale_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MorphanKeyFrame::set_has_scale_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MorphanKeyFrame::clear_has_scale_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MorphanKeyFrame::clear_scale_x() {
  scale_x_ = 1;
  clear_has_scale_x();
}
inline float MorphanKeyFrame::scale_x() const {
  return scale_x_;
}
inline void MorphanKeyFrame::set_scale_x(float value) {
  set_has_scale_x();
  scale_x_ = value;
}

// optional float scale_y = 4 [default = 1];
inline bool MorphanKeyFrame::has_scale_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MorphanKeyFrame::set_has_scale_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MorphanKeyFrame::clear_has_scale_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MorphanKeyFrame::clear_scale_y() {
  scale_y_ = 1;
  clear_has_scale_y();
}
inline float MorphanKeyFrame::scale_y() const {
  return scale_y_;
}
inline void MorphanKeyFrame::set_scale_y(float value) {
  set_has_scale_y();
  scale_y_ = value;
}

// optional float rotation = 5;
inline bool MorphanKeyFrame::has_rotation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MorphanKeyFrame::set_has_rotation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MorphanKeyFrame::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MorphanKeyFrame::clear_rotation() {
  rotation_ = 0;
  clear_has_rotation();
}
inline float MorphanKeyFrame::rotation() const {
  return rotation_;
}
inline void MorphanKeyFrame::set_rotation(float value) {
  set_has_rotation();
  rotation_ = value;
}

// optional float opacity = 6;
inline bool MorphanKeyFrame::has_opacity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MorphanKeyFrame::set_has_opacity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MorphanKeyFrame::clear_has_opacity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MorphanKeyFrame::clear_opacity() {
  opacity_ = 0;
  clear_has_opacity();
}
inline float MorphanKeyFrame::opacity() const {
  return opacity_;
}
inline void MorphanKeyFrame::set_opacity(float value) {
  set_has_opacity();
  opacity_ = value;
}

// repeated .Primitive primitives = 7;
inline int MorphanKeyFrame::primitives_size() const {
  return primitives_.size();
}
inline void MorphanKeyFrame::clear_primitives() {
  primitives_.Clear();
}
inline const ::Primitive& MorphanKeyFrame::primitives(int index) const {
  return primitives_.Get(index);
}
inline ::Primitive* MorphanKeyFrame::mutable_primitives(int index) {
  return primitives_.Mutable(index);
}
inline ::Primitive* MorphanKeyFrame::add_primitives() {
  return primitives_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Primitive >&
MorphanKeyFrame::primitives() const {
  return primitives_;
}
inline ::google::protobuf::RepeatedPtrField< ::Primitive >*
MorphanKeyFrame::mutable_primitives() {
  return &primitives_;
}

// optional float secs = 8;
inline bool MorphanKeyFrame::has_secs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MorphanKeyFrame::set_has_secs() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MorphanKeyFrame::clear_has_secs() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MorphanKeyFrame::clear_secs() {
  secs_ = 0;
  clear_has_secs();
}
inline float MorphanKeyFrame::secs() const {
  return secs_;
}
inline void MorphanKeyFrame::set_secs(float value) {
  set_has_secs();
  secs_ = value;
}

// -------------------------------------------------------------------

// Morphan

// repeated .MorphanKeyFrame frames = 1;
inline int Morphan::frames_size() const {
  return frames_.size();
}
inline void Morphan::clear_frames() {
  frames_.Clear();
}
inline const ::MorphanKeyFrame& Morphan::frames(int index) const {
  return frames_.Get(index);
}
inline ::MorphanKeyFrame* Morphan::mutable_frames(int index) {
  return frames_.Mutable(index);
}
inline ::MorphanKeyFrame* Morphan::add_frames() {
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MorphanKeyFrame >&
Morphan::frames() const {
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::MorphanKeyFrame >*
Morphan::mutable_frames() {
  return &frames_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Type>() {
  return ::Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Morphan_2eproto__INCLUDED
